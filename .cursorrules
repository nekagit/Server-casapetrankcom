# Casa Petrada E-commerce Website Development Rules

## Project Overview
This project is a complete recreation of Casa Petrada (https://casa-petrada.de), a German handmade Boho jewelry and fashion e-commerce website. The goal is to create a pixel-perfect clone with full functionality.

## Development Workflow
When you receive a request to "implement casapetra further", follow this exact workflow:

### 1. ANALYSIS PHASE
- **Analyze Current State**: Examine all project files (frontend, backend, database, configuration)
- **Compare with Original**: Compare current implementation against https://casa-petrada.de
- **Identify Gaps**: Find missing features, styling issues, functionality gaps
- **Create Analysis Report**: Generate a comprehensive `.md` file documenting findings

### 2. PLANNING PHASE
- **Create TODO List**: Break down missing features into actionable tasks
- **Prioritize Tasks**: Order tasks by importance and dependencies
- **Set Implementation Goals**: Define what to implement in current session

### 3. IMPLEMENTATION PHASE
- **Implement TODOs**: Work through the prioritized task list
- **Test Functionality**: Ensure each feature works correctly
- **Maintain Code Quality**: Follow established patterns and best practices

### 4. CLEANUP PHASE
- **Remove Unnecessary Files**: Delete unused code, assets, and configurations
- **Optimize Structure**: Clean up file organization and imports
- **Update Documentation**: Refresh README and other docs

### 5. LOOP
- **Repeat Process**: Continue the cycle until project is complete

## Technical Stack
- **Frontend**: Astro + TypeScript + Tailwind CSS + Vite
- **Backend**: FastAPI + Python + SQLAlchemy
- **Database**: PostgreSQL
- **Styling**: Tailwind CSS with custom CSS variables
- **Icons**: Font Awesome 6
- **Fonts**: Inter (body), Playfair Display (headings)

## Brand Guidelines

### Visual Identity
- **Colors**: Professional earth tones with high contrast accessibility
  - Primary: #c4a484 (boho-pink) - warm, professional gold
  - Secondary: #a68b5b (boho-brown) - rich brown accent
  - Dark: #2c2c2c (boho-dark) - professional dark for text/backgrounds
  - Light: #fefcf8 (boho-light) - clean, warm white
  - Beige: #f8f6f2 (boho-beige) - soft, warm background
  - Text Colors: #ffffff (light), #9ca3af (muted), #374151 (dark)
- **Typography**: Clean, readable fonts with elegant headings
- **Style**: Professional boho, handmade, natural, feminine, artisanal with high accessibility
- **Logo**: "CASA-PETRADA" with "Handmade Boho Schmuck" subtitle
- **Accessibility**: WCAG AA compliant contrast ratios, professional readability

### Content Tone
- **Language**: German (primary)
- **Voice**: Personal, artisanal, natural, feminine
- **Focus**: Handmade, unique, quality, personal service

## CURRENT IMPLEMENTATION STATUS

### ✅ COMPLETED FEATURES

#### **Frontend Components & Pages**
- ✅ **Layout System**: Main Layout.astro with professional navigation and footer
- ✅ **Homepage**: Complete homepage with hero, categories, features, testimonials
- ✅ **Product Pages**: Category pages (armbaender, ketten, fashion, sale)
- ✅ **Product Detail Pages**: Individual product pages with galleries, variants, reviews
- ✅ **Shopping Cart**: Complete cart functionality with quantity controls and order summary
- ✅ **Checkout Process**: Multi-step checkout with payment forms and order review
- ✅ **User Authentication**: Login and registration forms with validation
- ✅ **User Pages**: Account dashboard, wishlist, order tracking
- ✅ **Admin Panel**: Complete admin dashboard with navigation
- ✅ **Blog System**: Blog listing and individual post pages
- ✅ **Contact Page**: Contact form with validation
- ✅ **Search Interface**: Advanced search with filters, sorting, and multiple views
- ✅ **Legal Pages**: Sitemap, robots.txt, legal pages structure
- ✅ **SEO Components**: SEOHead, Analytics, Accessibility, PerformanceMonitor
- ✅ **Image Components**: ProductImage, ProductGallery, OptimizedImage
- ✅ **Newsletter**: NewsletterSignup component
- ✅ **PWA**: Complete PWA implementation with service worker

#### **Backend API System**
- ✅ **Authentication**: JWT-based auth with login/register
- ✅ **Products API**: CRUD operations, filtering, search, categories
- ✅ **Orders API**: Order creation, tracking, management
- ✅ **Users API**: User management and profiles
- ✅ **Reviews API**: Product reviews with moderation
- ✅ **Admin API**: Dashboard statistics and management
- ✅ **Contact API**: Contact form submissions
- ✅ **Newsletter API**: Newsletter subscription management
- ✅ **Database Models**: Complete SQLAlchemy models for all entities

#### **Advanced Services**
- ✅ **Image Management**: Complete image optimization and CDN integration
- ✅ **Search System**: Advanced search with filters and suggestions
- ✅ **Product Reviews**: Complete review system with moderation
- ✅ **Order Tracking**: Real-time order tracking system
- ✅ **Product Recommendations**: AI-powered recommendation engine
- ✅ **SEO Optimization**: Comprehensive SEO with structured data
- ✅ **User Management**: Complete user administration system
- ✅ **Inventory Management**: Stock tracking and alerts
- ✅ **Email Service**: Complete email notification system
- ✅ **Payment Processing**: Multiple payment gateway integration
- ✅ **Analytics**: Google Analytics, GTM, Facebook Pixel
- ✅ **Performance Monitoring**: Core Web Vitals tracking
- ✅ **Security**: Advanced security measures and compliance
- ✅ **Backup System**: Automated database backup and recovery
- ✅ **PWA Features**: Offline support, push notifications, app installation

#### **Production Infrastructure**
- ✅ **Real Backend Integration**: Database connection and API integration
- ✅ **Payment Processing**: Real payment gateway integration
- ✅ **Email System**: Professional email delivery service
- ✅ **CDN Integration**: Global content delivery network
- ✅ **SSL Security**: HTTPS enforcement and security headers
- ✅ **Performance Optimization**: Image optimization and caching
- ✅ **Monitoring**: Real-time monitoring and alerting
- ✅ **Deployment**: Production deployment configuration

### 🔄 IN PROGRESS / PARTIALLY IMPLEMENTED

#### **Frontend Enhancements**
- 🔄 **Mobile Menu**: Mobile navigation improvements
- 🔄 **Product Filtering**: Advanced filtering and sorting UI
- 🔄 **Database Seeding**: Sample data for development
- 🔄 **File Upload**: Image upload and management
- 🔄 **Email Templates**: Professional email templates

#### **Backend Enhancements**
- 🔄 **Payment Webhooks**: Payment confirmation handling
- 🔄 **Order Processing**: Automated order processing workflow
- 🔄 **Content Management**: Blog and page content management
- 🔄 **Media Library**: Image and file management system

### ❌ MISSING FEATURES

#### **Core E-commerce Features**
- ❌ **Product Comparison**: Product comparison functionality
- ❌ **Recently Viewed**: Recently viewed products tracking
- ❌ **Product Quick View**: Quick product preview modal
- ❌ **Stock Management**: Real-time stock display and alerts
- ❌ **Product Variants**: Size, color, material variants
- ❌ **Bulk Operations**: Bulk add to cart, wishlist
- ❌ **Product Bundles**: Product bundle and set functionality

#### **Content Management**
- ❌ **Blog CMS**: Blog post creation and editing
- ❌ **Page CMS**: Static page content management
- ❌ **Media Library**: Image and file management
- ❌ **Content Scheduling**: Scheduled content publishing
- ❌ **Content Versioning**: Content revision history
- ❌ **Content Workflow**: Content approval workflow

#### **Advanced Features**
- ❌ **Multi-language**: Internationalization (i18n)
- ❌ **Currency Support**: Multi-currency pricing
- ❌ **Tax Calculation**: Tax calculation and display
- ❌ **Shipping Calculator**: Real-time shipping costs
- ❌ **Discount System**: Promotional codes and discounts
- ❌ **Loyalty Program**: Customer loyalty and rewards
- ❌ **Gift Cards**: Gift card functionality
- ❌ **Subscription**: Product subscriptions
- ❌ **Auction System**: Product auctions
- ❌ **Marketplace**: Multi-vendor marketplace

#### **Integration Features**
- ❌ **Social Login**: Google, Facebook, Apple login
- ❌ **Social Sharing**: Social media sharing
- ❌ **Live Chat**: Customer support chat
- ❌ **Video Integration**: Product videos and tutorials
- ❌ **AR/VR**: Augmented reality product viewing
- ❌ **IoT Integration**: Smart device integration
- ❌ **API Documentation**: Comprehensive API docs
- ❌ **Webhook System**: Event-driven integrations

## Required Features

### Core E-commerce Features
- [x] Product catalog with categories
- [x] Product detail pages with image galleries
- [x] Shopping cart functionality
- [x] User authentication (login/register)
- [x] Checkout process
- [x] Order management
- [x] User account dashboard
- [x] Wishlist functionality
- [x] Search functionality
- [x] Product filtering and sorting

### Content Management
- [x] Blog system
- [x] About page with founder story
- [x] Contact page with form
- [x] Legal pages (Impressum, Datenschutz, AGB, etc.)
- [x] Newsletter signup
- [x] Customer testimonials/reviews

### Design Requirements
- [x] Responsive design (mobile-first)
- [x] Navigation matching original exactly
- [x] Hero section with call-to-action buttons
- [x] Category overview grid
- [x] Product showcase sections
- [x] Features section highlighting USP
- [x] Testimonials section
- [x] Footer with all required links

### Product Categories
- **Armbänder** (Bracelets): Einfacharmbänder, Wickelarmbänder
- **Ketten** (Necklaces): alle Ketten, kurze Ketten, Wechselketten, Anhänger
- **Fußkettchen** (Anklets)
- **Modeschmuck** (Fashion jewelry)
- **Fashion**: Kleider, Oberteile, Accessories
- **Taschen** (Bags)
- **SALE** section

### Key Pages
- [x] Homepage with hero, categories, bestsellers, features, about, testimonials
- [x] Product listing pages for each category
- [x] Individual product detail pages
- [x] Shopping cart page
- [x] Checkout page
- [x] User account pages
- [x] About page
- [x] Contact page
- [x] Blog listing and individual posts
- [x] Legal pages

## Code Standards

### Frontend (Astro + TypeScript + Tailwind CSS)
- Use Astro for static site generation and component architecture
- Use TypeScript for type safety across all components
- Use Tailwind CSS for utility-first styling with custom design tokens
- Follow component-based architecture with Astro components
- Implement responsive design with mobile-first approach using Tailwind breakpoints
- Use semantic HTML structure with Astro's built-in optimizations
- Optimize images and assets with Astro's built-in image optimization
- Follow accessibility guidelines and use Tailwind's accessibility utilities

### Professional Design Standards
- **Color Accessibility**: Ensure WCAG AA compliance with proper contrast ratios
- **Typography**: Use professional, readable fonts with proper hierarchy
- **Footer Design**: High contrast text on dark backgrounds for readability
- **Navigation**: Clear, accessible navigation with proper focus states
- **Color Consistency**: Use CSS variables for consistent brand colors across all components
- **Professional Polish**: Clean, modern design that reflects quality craftsmanship

### Backend (Python/FastAPI)
- Use FastAPI for API endpoints
- Implement proper error handling
- Use Pydantic for data validation
- Follow RESTful API conventions
- Implement proper authentication
- Use SQLAlchemy for database operations
- Add comprehensive logging

### Database Design
- Design normalized database schema
- Include proper relationships and constraints
- Add indexes for performance
- Implement soft deletes where appropriate
- Use migrations for schema changes

## File Organization

### Frontend Structure
```
frontend/
├── src/
│   ├── components/     # Astro components
│   ├── layouts/        # Astro layouts
│   ├── pages/          # Astro pages (file-based routing)
│   ├── services/       # API services
│   ├── types/          # TypeScript type definitions
│   ├── utils/          # Utility functions
│   ├── styles/         # Global styles and Tailwind config
│   └── env.d.ts        # TypeScript environment definitions
├── public/
│   ├── images/         # Static images
│   └── icons/          # Icon files
├── astro.config.mjs    # Astro configuration
├── tailwind.config.mjs # Tailwind CSS configuration
└── dist/               # Built files
```

### Backend Structure
```
backend/
├── app/
│   ├── api/           # API route handlers
│   ├── core/          # Configuration and security
│   ├── models/        # Database models
│   ├── schemas/       # Pydantic schemas
│   ├── services/      # Business logic
│   └── utils/         # Utility functions
├── static/            # Static files
└── tests/             # Test files
```

## Development Commands
- **Frontend Dev**: `cd frontend && npm run dev` (Astro dev server)
- **Backend Dev**: `cd backend && uvicorn main:app --reload`
- **Build Frontend**: `cd frontend && npm run build` (Astro build)
- **Preview Frontend**: `cd frontend && npm run preview` (Preview built site)
- **Run Tests**: `cd backend && python -m pytest`

## Quality Assurance

### Testing Requirements
- Unit tests for backend functions
- Integration tests for API endpoints
- Frontend component testing
- E2E testing for critical user flows

### Performance Requirements
- Page load times under 3 seconds
- Mobile-first responsive design
- Optimized images and assets
- Efficient database queries

### Security Requirements
- Input validation and sanitization
- CSRF protection
- Secure authentication
- HTTPS enforcement
- Data encryption for sensitive information

## Deployment Considerations
- Environment-specific configurations
- Database migrations
- Static file serving
- SSL certificate setup
- Domain configuration
- Monitoring and logging

## Content Requirements

### German Language Content
- All text content in German
- Proper German grammar and spelling
- Cultural appropriateness for German market
- Legal compliance with German e-commerce laws

### SEO Optimization
- Meta tags and descriptions
- Structured data markup
- Sitemap generation
- URL structure optimization
- Image alt tags

## Success Criteria
- [x] Pixel-perfect match to original design
- [x] All functionality working correctly
- [x] Responsive design on all devices
- [x] Fast loading times
- [x] Clean, maintainable code
- [x] Comprehensive documentation
- [ ] No console errors or warnings
- [x] Accessibility compliance

## Notes
- Always maintain the handmade, artisanal feel
- Focus on user experience and ease of navigation
- Ensure mobile responsiveness is perfect
- Keep the personal touch that makes Casa Petrada special
- Maintain German language throughout
- Follow e-commerce best practices for conversion optimization

When implementing, always prioritize user experience and visual fidelity to the original site while maintaining clean, scalable code architecture.