---
// Product Comparison Component
export interface Props {
  products?: any[];
  maxProducts?: number;
}

const { products = [], maxProducts = 4 } = Astro.props;

// Mock comparison data - in real app this would come from API
const comparisonProducts = products.length > 0 ? products : [
  {
    id: 1,
    name: "Tibet Armband",
    price: 24.90,
    originalPrice: 29.90,
    image: "/images/products/tibet-armband.jpg",
    category: "Armbänder",
    rating: 4.8,
    reviewCount: 127,
    inStock: true,
    stock: 15,
    material: "Perlen, Metall, Baumwolle",
    color: "Braun, Gold",
    size: "One Size",
    weight: "25g",
    dimensions: "18cm x 2cm",
    care: "Trocken abwischen, vor Wasser schützen",
    origin: "Tibet",
    handmade: true,
    tags: ["Tibet", "Handgefertigt", "Naturstein", "Spirituell"],
    description: "Handgefertigtes Tibet Armband aus natürlichen Materialien."
  },
  {
    id: 2,
    name: "Boho Kette mit Anhänger",
    price: 39.90,
    image: "/images/products/product_1.jpg",
    category: "Ketten",
    rating: 4.6,
    reviewCount: 89,
    inStock: true,
    stock: 8,
    material: "Metall, Anhänger",
    color: "Gold",
    size: "One Size",
    weight: "15g",
    dimensions: "45cm",
    care: "Mit weichem Tuch abwischen",
    origin: "Deutschland",
    handmade: true,
    tags: ["Boho", "Anhänger", "Handgefertigt"],
    description: "Elegante Boho Kette mit handgefertigtem Anhänger."
  },
  {
    id: 3,
    name: "Mondstein Ohrringe",
    price: 49.90,
    image: "/images/products/product_3.jpg",
    category: "Ohrringe",
    rating: 4.4,
    reviewCount: 56,
    inStock: true,
    stock: 12,
    material: "Silber, Mondstein",
    color: "Silber",
    size: "One Size",
    weight: "8g",
    dimensions: "2cm x 1.5cm",
    care: "Vorsichtig reinigen",
    origin: "Deutschland",
    handmade: true,
    tags: ["Mondstein", "Silber", "Handgefertigt"],
    description: "Zarte Mondstein Ohrringe in Silber gefasst."
  }
];

const comparisonFeatures = [
  { key: 'name', label: 'Produktname', type: 'text' },
  { key: 'price', label: 'Preis', type: 'price' },
  { key: 'rating', label: 'Bewertung', type: 'rating' },
  { key: 'category', label: 'Kategorie', type: 'text' },
  { key: 'material', label: 'Material', type: 'text' },
  { key: 'color', label: 'Farbe', type: 'text' },
  { key: 'size', label: 'Größe', type: 'text' },
  { key: 'weight', label: 'Gewicht', type: 'text' },
  { key: 'dimensions', label: 'Abmessungen', type: 'text' },
  { key: 'care', label: 'Pflege', type: 'text' },
  { key: 'origin', label: 'Herkunft', type: 'text' },
  { key: 'handmade', label: 'Handgefertigt', type: 'boolean' },
  { key: 'inStock', label: 'Verfügbarkeit', type: 'stock' }
];
---

<div class="product-comparison">
  <!-- Comparison Header -->
  <div class="bg-white rounded-lg shadow-sm border border-boho-accent/20 mb-6">
    <div class="px-6 py-4 border-b border-boho-accent/20">
      <div class="flex items-center justify-between">
        <h2 class="text-xl font-semibold text-boho-dark">Produktvergleich</h2>
        <div class="flex items-center space-x-2">
          <span class="text-sm text-boho-dark/70">
            {comparisonProducts.length} von {maxProducts} Produkten
          </span>
          <button 
            id="clear-comparison"
            class="text-sm text-boho-pink hover:text-boho-brown transition-colors"
          >
            Alle entfernen
          </button>
        </div>
      </div>
    </div>

    <!-- Product Cards -->
    <div class="p-6">
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {comparisonProducts.map((product, index) => (
          <div class="comparison-product-card" data-product-id={product.id}>
            <div class="relative">
              <img 
                src={product.image} 
                alt={product.name}
                class="w-full h-32 object-cover rounded-lg border border-boho-accent/20"
              />
              <button 
                class="remove-from-comparison absolute top-2 right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors"
                data-product-id={product.id}
                title="Aus Vergleich entfernen"
              >
                <i class="fas fa-times text-xs"></i>
              </button>
            </div>
            
            <div class="mt-3">
              <h3 class="font-semibold text-boho-dark text-sm mb-1 line-clamp-2">
                {product.name}
              </h3>
              
              <div class="flex items-center justify-between mb-2">
                <span class="text-lg font-bold text-boho-dark">
                  {product.price.toFixed(2)} €
                </span>
                {product.originalPrice && (
                  <span class="text-sm text-boho-dark/60 line-through">
                    {product.originalPrice.toFixed(2)} €
                  </span>
                )}
              </div>
              
              <div class="flex items-center space-x-1 mb-2">
                <div class="flex items-center">
                  {Array.from({ length: 5 }, (_, i) => (
                    <i class={`fas fa-star text-xs ${i < Math.floor(product.rating) ? 'text-yellow-400' : 'text-gray-300'}`}></i>
                  ))}
                </div>
                <span class="text-xs text-boho-dark/60">({product.reviewCount})</span>
              </div>
              
              <div class="flex items-center justify-between">
                <span class={`text-xs px-2 py-1 rounded ${
                  product.inStock 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-red-100 text-red-800'
                }`}>
                  {product.inStock ? 'Auf Lager' : 'Nicht verfügbar'}
                </span>
                
                <button 
                  class="text-xs text-boho-pink hover:text-boho-brown transition-colors"
                  data-product-id={product.id}
                >
                  Details ansehen
                </button>
              </div>
            </div>
          </div>
        ))}
        
        <!-- Add Product Slot -->
        {comparisonProducts.length < maxProducts && (
          <div class="add-product-slot border-2 border-dashed border-boho-accent rounded-lg flex items-center justify-center min-h-[200px] hover:border-boho-pink transition-colors cursor-pointer">
            <div class="text-center">
              <i class="fas fa-plus text-3xl text-boho-accent mb-2"></i>
              <p class="text-sm text-boho-dark/70">Produkt hinzufügen</p>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Comparison Table -->
  {comparisonProducts.length > 1 && (
    <div class="bg-white rounded-lg shadow-sm border border-boho-accent/20 overflow-hidden">
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-boho-beige">
            <tr>
              <th class="px-6 py-4 text-left text-sm font-semibold text-boho-dark">Merkmal</th>
              {comparisonProducts.map((product) => (
                <th class="px-6 py-4 text-center text-sm font-semibold text-boho-dark min-w-[200px]">
                  {product.name}
                </th>
              ))}
            </tr>
          </thead>
          <tbody class="divide-y divide-boho-accent/20">
            {comparisonFeatures.map((feature) => (
              <tr class="hover:bg-boho-beige/50 transition-colors">
                <td class="px-6 py-4 text-sm font-medium text-boho-dark">
                  {feature.label}
                </td>
                {comparisonProducts.map((product) => (
                  <td class="px-6 py-4 text-center text-sm text-boho-dark/80">
                    {feature.type === 'price' && (
                      <div class="flex flex-col items-center">
                        <span class="font-semibold">{product[feature.key].toFixed(2)} €</span>
                        {product.originalPrice && (
                          <span class="text-xs text-boho-dark/60 line-through">
                            {product.originalPrice.toFixed(2)} €
                          </span>
                        )}
                      </div>
                    )}
                    
                    {feature.type === 'rating' && (
                      <div class="flex items-center justify-center space-x-1">
                        <div class="flex items-center">
                          {Array.from({ length: 5 }, (_, i) => (
                            <i class={`fas fa-star text-sm ${i < Math.floor(product[feature.key]) ? 'text-yellow-400' : 'text-gray-300'}`}></i>
                          ))}
                        </div>
                        <span class="text-xs text-boho-dark/60">({product.reviewCount})</span>
                      </div>
                    )}
                    
                    {feature.type === 'stock' && (
                      <span class={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                        product[feature.key] 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {product[feature.key] ? 'Auf Lager' : 'Nicht verfügbar'}
                      </span>
                    )}
                    
                    {feature.type === 'boolean' && (
                      <span class={`inline-flex items-center px-2 py-1 text-xs font-medium rounded-full ${
                        product[feature.key] 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        <i class={`fas fa-${product[feature.key] ? 'check' : 'times'} mr-1`}></i>
                        {product[feature.key] ? 'Ja' : 'Nein'}
                      </span>
                    )}
                    
                    {feature.type === 'text' && (
                      <span class="text-sm">{product[feature.key]}</span>
                    )}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )}

  <!-- Comparison Actions -->
  {comparisonProducts.length > 1 && (
    <div class="mt-6 flex flex-wrap gap-4 justify-center">
      <button 
        class="px-6 py-3 bg-boho-pink text-white rounded-lg hover:bg-boho-brown transition-colors"
        id="add-all-to-cart"
      >
        <i class="fas fa-shopping-cart mr-2"></i>
        Alle in den Warenkorb
      </button>
      
      <button 
        class="px-6 py-3 border border-boho-accent text-boho-dark rounded-lg hover:bg-boho-beige transition-colors"
        id="add-all-to-wishlist"
      >
        <i class="fas fa-heart mr-2"></i>
        Alle zur Wunschliste
      </button>
      
      <button 
        class="px-6 py-3 border border-boho-accent text-boho-dark rounded-lg hover:bg-boho-beige transition-colors"
        id="share-comparison"
      >
        <i class="fas fa-share-alt mr-2"></i>
        Vergleich teilen
      </button>
    </div>
  )}

  <!-- Empty State -->
  {comparisonProducts.length === 0 && (
    <div class="text-center py-12">
      <div class="mx-auto w-24 h-24 bg-boho-beige rounded-full flex items-center justify-center mb-4">
        <i class="fas fa-balance-scale text-3xl text-boho-pink"></i>
      </div>
      <h3 class="text-xl font-semibold text-boho-dark mb-2">Keine Produkte zum Vergleich</h3>
      <p class="text-boho-dark/70 mb-6">
        Füge Produkte hinzu, um sie zu vergleichen.
      </p>
      <a 
        href="/" 
        class="inline-flex items-center px-6 py-3 bg-boho-pink text-white rounded-lg hover:bg-boho-brown transition-colors"
      >
        <i class="fas fa-arrow-left mr-2"></i>
        Produkte entdecken
      </a>
    </div>
  )}
</div>

<style>
  .comparison-product-card {
    transition: all 0.3s ease;
  }

  .comparison-product-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .add-product-slot {
    transition: all 0.3s ease;
  }

  .add-product-slot:hover {
    background-color: var(--boho-beige);
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Responsive table */
  @media (max-width: 768px) {
    .comparison-table {
      font-size: 0.875rem;
    }
    
    .comparison-table th,
    .comparison-table td {
      padding: 0.5rem;
    }
  }

  /* Loading states */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid var(--boho-pink);
    border-top: 2px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<script>
  // Product comparison functionality
  document.addEventListener('DOMContentLoaded', function() {
    const clearComparisonBtn = document.getElementById('clear-comparison');
    const removeFromComparisonBtns = document.querySelectorAll('.remove-from-comparison');
    const addProductSlot = document.querySelector('.add-product-slot');
    const addAllToCartBtn = document.getElementById('add-all-to-cart');
    const addAllToWishlistBtn = document.getElementById('add-all-to-wishlist');
    const shareComparisonBtn = document.getElementById('share-comparison');
    const detailsBtns = document.querySelectorAll('[data-product-id]');

    // Clear all comparison
    if (clearComparisonBtn) {
      clearComparisonBtn.addEventListener('click', function() {
        if (confirm('Möchtest du alle Produkte aus dem Vergleich entfernen?')) {
          clearAllComparison();
        }
      });
    }

    // Remove individual products
    removeFromComparisonBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const productId = this.getAttribute('data-product-id');
        removeFromComparison(productId);
      });
    });

    // Add product to comparison
    if (addProductSlot) {
      addProductSlot.addEventListener('click', function() {
        // In a real app, this would open a product selection modal
        showProductSelectionModal();
      });
    }

    // View product details
    detailsBtns.forEach(btn => {
      if (btn.textContent.includes('Details ansehen')) {
        btn.addEventListener('click', function() {
          const productId = this.getAttribute('data-product-id');
          window.location.href = `/products/${productId}`;
        });
      }
    });

    // Add all to cart
    if (addAllToCartBtn) {
      addAllToCartBtn.addEventListener('click', function() {
        addAllToCart();
      });
    }

    // Add all to wishlist
    if (addAllToWishlistBtn) {
      addAllToWishlistBtn.addEventListener('click', function() {
        addAllToWishlist();
      });
    }

    // Share comparison
    if (shareComparisonBtn) {
      shareComparisonBtn.addEventListener('click', function() {
        shareComparison();
      });
    }

    function clearAllComparison() {
      // In a real app, this would clear the comparison from localStorage/API
      localStorage.removeItem('productComparison');
      location.reload();
    }

    function removeFromComparison(productId) {
      // In a real app, this would remove from comparison via API
      const comparison = JSON.parse(localStorage.getItem('productComparison') || '[]');
      const updatedComparison = comparison.filter(id => id !== productId);
      localStorage.setItem('productComparison', JSON.stringify(updatedComparison));
      
      // Remove from DOM
      const productCard = document.querySelector(`[data-product-id="${productId}"]`);
      if (productCard) {
        productCard.remove();
      }
      
      showNotification('Produkt aus Vergleich entfernt', 'success');
    }

    function addAllToCart() {
      const productCards = document.querySelectorAll('.comparison-product-card');
      const productIds = Array.from(productCards).map(card => 
        card.getAttribute('data-product-id')
      );
      
      // In a real app, this would add all products to cart via API
      console.log('Adding to cart:', productIds);
      showNotification('Alle Produkte zum Warenkorb hinzugefügt!', 'success');
    }

    function addAllToWishlist() {
      const productCards = document.querySelectorAll('.comparison-product-card');
      const productIds = Array.from(productCards).map(card => 
        card.getAttribute('data-product-id')
      );
      
      // In a real app, this would add all products to wishlist via API
      console.log('Adding to wishlist:', productIds);
      showNotification('Alle Produkte zur Wunschliste hinzugefügt!', 'success');
    }

    function shareComparison() {
      const productCards = document.querySelectorAll('.comparison-product-card');
      const productIds = Array.from(productCards).map(card => 
        card.getAttribute('data-product-id')
      );
      
      const comparisonUrl = `${window.location.origin}/compare?products=${productIds.join(',')}`;
      
      if (navigator.share) {
        navigator.share({
          title: 'Produktvergleich - Casa Petrada',
          text: 'Schau dir meinen Produktvergleich an!',
          url: comparisonUrl
        });
      } else {
        navigator.clipboard.writeText(comparisonUrl).then(() => {
          showNotification('Vergleichs-Link in die Zwischenablage kopiert!', 'success');
        });
      }
    }

    function showProductSelectionModal() {
      // In a real app, this would show a modal with product selection
      showNotification('Produktauswahl wird implementiert...', 'info');
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white ${
        type === 'success' ? 'bg-green-600' : 
        type === 'error' ? 'bg-red-600' : 
        'bg-boho-pink'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // Load comparison from localStorage
    function loadComparison() {
      const comparison = JSON.parse(localStorage.getItem('productComparison') || '[]');
      if (comparison.length > 0) {
        // In a real app, this would fetch product data from API
        console.log('Loading comparison:', comparison);
      }
    }

    // Initialize
    loadComparison();
  });
</script>