---
// Mobile Menu Component with JavaScript functionality
export interface Props {
  menuItems: Array<{
    label: string;
    href: string;
    icon?: string;
    children?: Array<{
      label: string;
      href: string;
      icon?: string;
    }>;
  }>;
  className?: string;
}

const { menuItems, className = '' } = Astro.props;
---

<!-- Mobile Menu Toggle Button -->
<button 
  id="mobile-menu-toggle" 
  class={`md:hidden p-2 rounded-md text-boho-dark hover:text-boho-pink hover:bg-boho-light transition-colors duration-300 ${className}`}
  aria-label="Toggle mobile menu"
  aria-expanded="false"
  aria-controls="mobile-menu"
>
  <i class="fas fa-bars text-xl"></i>
</button>

<!-- Mobile Menu Overlay -->
<div 
  id="mobile-menu-overlay" 
  class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"
  aria-hidden="true"
></div>

<!-- Mobile Menu -->
<nav 
  id="mobile-menu" 
  class="fixed top-0 left-0 h-full w-80 max-w-sm bg-white shadow-xl z-50 transform -translate-x-full transition-transform duration-300 ease-in-out"
  aria-label="Mobile navigation"
  role="navigation"
>
  <!-- Menu Header -->
  <div class="flex items-center justify-between p-4 border-b border-boho-accent">
    <h2 class="text-lg font-semibold text-boho-dark">Men√º</h2>
    <button 
      id="mobile-menu-close" 
      class="p-2 rounded-md text-boho-dark hover:text-boho-pink hover:bg-boho-light transition-colors duration-300"
      aria-label="Close mobile menu"
    >
      <i class="fas fa-times text-xl"></i>
    </button>
  </div>

  <!-- Menu Items -->
  <div class="overflow-y-auto h-full pb-20">
    <ul class="py-4">
      {menuItems.map((item, index) => (
        <li key={index} class="border-b border-boho-accent/30 last:border-b-0">
          {item.children ? (
            <!-- Dropdown Menu Item -->
            <div class="mobile-dropdown">
              <button 
                class="w-full flex items-center justify-between p-4 text-left text-boho-dark hover:text-boho-pink hover:bg-boho-light transition-colors duration-300"
                aria-expanded="false"
                aria-controls={`mobile-submenu-${index}`}
              >
                <div class="flex items-center space-x-3">
                  {item.icon && <i class={`${item.icon} text-lg`}></i>}
                  <span class="font-medium">{item.label}</span>
                </div>
                <i class="fas fa-chevron-down transition-transform duration-300"></i>
              </button>
              
              <!-- Submenu -->
              <ul 
                id={`mobile-submenu-${index}`}
                class="hidden bg-boho-beige/50"
                role="menu"
              >
                {item.children.map((child, childIndex) => (
                  <li key={childIndex}>
                    <a 
                      href={child.href}
                      class="block p-4 pl-12 text-boho-dark hover:text-boho-pink hover:bg-boho-light transition-colors duration-300"
                      role="menuitem"
                    >
                      <div class="flex items-center space-x-3">
                        {child.icon && <i class={`${child.icon} text-sm`}></i>}
                        <span>{child.label}</span>
                      </div>
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <!-- Regular Menu Item -->
            <a 
              href={item.href}
              class="block p-4 text-boho-dark hover:text-boho-pink hover:bg-boho-light transition-colors duration-300"
              role="menuitem"
            >
              <div class="flex items-center space-x-3">
                {item.icon && <i class={`${item.icon} text-lg`}></i>}
                <span class="font-medium">{item.label}</span>
              </div>
            </a>
          )}
        </li>
      ))}
    </ul>

    <!-- User Actions -->
    <div class="px-4 py-6 border-t border-boho-accent/30">
      <div class="space-y-3">
        <a 
          href="/login" 
          class="block w-full text-center py-3 px-4 bg-boho-pink text-white rounded-lg hover:bg-boho-brown transition-colors duration-300"
        >
          <i class="fas fa-sign-in-alt mr-2"></i>
          Anmelden
        </a>
        <a 
          href="/register" 
          class="block w-full text-center py-3 px-4 border border-boho-pink text-boho-pink rounded-lg hover:bg-boho-pink hover:text-white transition-colors duration-300"
        >
          <i class="fas fa-user-plus mr-2"></i>
          Registrieren
        </a>
      </div>
    </div>

    <!-- Social Links -->
    <div class="px-4 py-6 border-t border-boho-accent/30">
      <h3 class="text-sm font-semibold text-boho-dark mb-4">Folge uns</h3>
      <div class="flex space-x-4">
        <a 
          href="#" 
          class="p-3 bg-boho-light rounded-lg text-boho-pink hover:bg-boho-pink hover:text-white transition-colors duration-300"
          aria-label="Instagram"
        >
          <i class="fab fa-instagram text-xl"></i>
        </a>
        <a 
          href="#" 
          class="p-3 bg-boho-light rounded-lg text-boho-pink hover:bg-boho-pink hover:text-white transition-colors duration-300"
          aria-label="Facebook"
        >
          <i class="fab fa-facebook text-xl"></i>
        </a>
        <a 
          href="#" 
          class="p-3 bg-boho-light rounded-lg text-boho-pink hover:bg-boho-pink hover:text-white transition-colors duration-300"
          aria-label="Pinterest"
        >
          <i class="fab fa-pinterest text-xl"></i>
        </a>
      </div>
    </div>
  </div>
</nav>

<script>
  // Mobile Menu JavaScript functionality
  class MobileMenu {
    private isOpen: boolean = false;
    private toggleButton: HTMLElement | null = null;
    private closeButton: HTMLElement | null = null;
    private overlay: HTMLElement | null = null;
    private menu: HTMLElement | null = null;
    private dropdowns: NodeListOf<HTMLElement> | null = null;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.setupKeyboardNavigation();
      this.setupAccessibility();
    }

    private initializeElements(): void {
      this.toggleButton = document.getElementById('mobile-menu-toggle');
      this.closeButton = document.getElementById('mobile-menu-close');
      this.overlay = document.getElementById('mobile-menu-overlay');
      this.menu = document.getElementById('mobile-menu');
      this.dropdowns = document.querySelectorAll('.mobile-dropdown');
    }

    private setupEventListeners(): void {
      // Toggle button
      this.toggleButton?.addEventListener('click', () => {
        this.toggle();
      });

      // Close button
      this.closeButton?.addEventListener('click', () => {
        this.close();
      });

      // Overlay click
      this.overlay?.addEventListener('click', () => {
        this.close();
      });

      // Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });

      // Dropdown functionality
      this.setupDropdowns();
    }

    private setupDropdowns(): void {
      this.dropdowns?.forEach((dropdown) => {
        const button = dropdown.querySelector('button');
        const submenu = dropdown.querySelector('ul');
        const chevron = dropdown.querySelector('.fa-chevron-down');

        if (button && submenu && chevron) {
          button.addEventListener('click', () => {
            const isExpanded = button.getAttribute('aria-expanded') === 'true';
            
            if (isExpanded) {
              this.closeDropdown(button, submenu, chevron);
            } else {
              this.openDropdown(button, submenu, chevron);
            }
          });
        }
      });
    }

    private openDropdown(button: HTMLElement, submenu: HTMLElement, chevron: HTMLElement): void {
      button.setAttribute('aria-expanded', 'true');
      submenu.classList.remove('hidden');
      chevron.classList.add('rotate-180');
      
      // Animate submenu
      submenu.style.maxHeight = '0';
      submenu.style.overflow = 'hidden';
      submenu.style.transition = 'max-height 0.3s ease-in-out';
      
      setTimeout(() => {
        submenu.style.maxHeight = submenu.scrollHeight + 'px';
      }, 10);
    }

    private closeDropdown(button: HTMLElement, submenu: HTMLElement, chevron: HTMLElement): void {
      button.setAttribute('aria-expanded', 'false');
      chevron.classList.remove('rotate-180');
      
      // Animate submenu
      submenu.style.maxHeight = '0';
      
      setTimeout(() => {
        submenu.classList.add('hidden');
        submenu.style.maxHeight = '';
        submenu.style.overflow = '';
        submenu.style.transition = '';
      }, 300);
    }

    private setupKeyboardNavigation(): void {
      // Tab navigation
      document.addEventListener('keydown', (e) => {
        if (!this.isOpen) return;

        if (e.key === 'Tab') {
          const focusableElements = this.menu?.querySelectorAll(
            'button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])'
          );
          
          if (focusableElements) {
            const firstElement = focusableElements[0] as HTMLElement;
            const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
            
            if (e.shiftKey && document.activeElement === firstElement) {
              e.preventDefault();
              lastElement.focus();
            } else if (!e.shiftKey && document.activeElement === lastElement) {
              e.preventDefault();
              firstElement.focus();
            }
          }
        }
      });
    }

    private setupAccessibility(): void {
      // Focus management
      this.toggleButton?.addEventListener('click', () => {
        if (this.isOpen) {
          this.toggleButton?.focus();
        } else {
          const firstFocusable = this.menu?.querySelector('button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])') as HTMLElement;
          firstFocusable?.focus();
        }
      });

      // ARIA attributes
      this.updateAriaAttributes();
    }

    private updateAriaAttributes(): void {
      if (this.toggleButton) {
        this.toggleButton.setAttribute('aria-expanded', this.isOpen.toString());
      }
      
      if (this.menu) {
        this.menu.setAttribute('aria-hidden', (!this.isOpen).toString());
      }
    }

    public toggle(): void {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    public open(): void {
      this.isOpen = true;
      this.menu?.classList.remove('-translate-x-full');
      this.overlay?.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
      this.updateAriaAttributes();
      
      // Focus first focusable element
      setTimeout(() => {
        const firstFocusable = this.menu?.querySelector('button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])') as HTMLElement;
        firstFocusable?.focus();
      }, 300);
    }

    public close(): void {
      this.isOpen = false;
      this.menu?.classList.add('-translate-x-full');
      this.overlay?.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
      this.updateAriaAttributes();
      
      // Close all dropdowns
      this.dropdowns?.forEach((dropdown) => {
        const button = dropdown.querySelector('button');
        const submenu = dropdown.querySelector('ul');
        const chevron = dropdown.querySelector('.fa-chevron-down');
        
        if (button && submenu && chevron) {
          this.closeDropdown(button, submenu, chevron);
        }
      });
    }

    public isMenuOpen(): boolean {
      return this.isOpen;
    }
  }

  // Initialize mobile menu when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenu = new MobileMenu();
    
    // Expose to global scope for external access
    (window as any).mobileMenu = mobileMenu;
  });

  // Handle window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768) { // md breakpoint
      const mobileMenu = (window as any).mobileMenu;
      if (mobileMenu && mobileMenu.isMenuOpen()) {
        mobileMenu.close();
      }
    }
  });

  // Handle page navigation
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const link = target.closest('a[href]');
    
    if (link && link.getAttribute('href')?.startsWith('/')) {
      const mobileMenu = (window as any).mobileMenu;
      if (mobileMenu && mobileMenu.isMenuOpen()) {
        mobileMenu.close();
      }
    }
  });
</script>

<style>
  /* Mobile menu animations */
  .mobile-dropdown ul {
    transition: max-height 0.3s ease-in-out;
  }
  
  .fa-chevron-down {
    transition: transform 0.3s ease-in-out;
  }
  
  .rotate-180 {
    transform: rotate(180deg);
  }
  
  /* Prevent body scroll when menu is open */
  body.overflow-hidden {
    overflow: hidden;
  }
  
  /* Focus styles */
  .mobile-menu button:focus,
  .mobile-menu a:focus {
    outline: 2px solid #c4a484;
    outline-offset: 2px;
  }
</style>
