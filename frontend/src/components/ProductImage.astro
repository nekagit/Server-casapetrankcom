---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  priority?: boolean;
  className?: string;
  placeholder?: string;
  blurDataURL?: string;
  quality?: number;
  format?: 'webp' | 'avif' | 'jpeg' | 'png';
  responsive?: boolean;
  gallery?: boolean;
  zoom?: boolean;
  caption?: string;
}

const {
  src,
  alt,
  width = 400,
  height = 400,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  loading = 'lazy',
  priority = false,
  className = '',
  placeholder,
  blurDataURL,
  quality = 80,
  format = 'webp',
  responsive = true,
  gallery = false,
  zoom = false,
  caption
} = Astro.props;

// Generate optimized image URLs
const generateImageUrls = (baseSrc: string, baseWidth: number, baseHeight: number) => {
  const cdnUrl = 'https://cdn.casa-petrada.de';
  const params = new URLSearchParams();
  params.append('w', baseWidth.toString());
  params.append('h', baseHeight.toString());
  params.append('f', format);
  params.append('q', quality.toString());
  
  const queryString = params.toString();
  const optimizedSrc = `${cdnUrl}/images/${baseSrc}?${queryString}`;
  
  // Generate responsive sizes
  const responsiveUrls = {
    mobile: `${cdnUrl}/images/${baseSrc}?w=400&h=400&f=${format}&q=${quality}`,
    tablet: `${cdnUrl}/images/${baseSrc}?w=800&h=800&f=${format}&q=${quality}`,
    desktop: `${cdnUrl}/images/${baseSrc}?w=1200&h=1200&f=${format}&q=${quality}`
  };
  
  // Generate blur placeholder
  const blurPlaceholder = `${cdnUrl}/images/${baseSrc}?w=20&h=20&f=${format}&blur=10&q=10`;
  
  return {
    optimized: optimizedSrc,
    responsive: responsiveUrls,
    blur: blurPlaceholder
  };
};

const imageUrls = generateImageUrls(src, width, height);
const finalPlaceholder = placeholder || imageUrls.blur;
const finalBlurDataURL = blurDataURL || imageUrls.blur;
---

<div class={`product-image-container ${className} ${gallery ? 'gallery-item' : ''} ${zoom ? 'zoom-enabled' : ''}`}>
  {responsive ? (
    <picture class="product-image-picture">
      <!-- AVIF format for modern browsers -->
      <source 
        media="(min-width: 1200px)" 
        srcset={imageUrls.responsive.desktop.replace('webp', 'avif')}
        type="image/avif"
      >
      <source 
        media="(min-width: 768px)" 
        srcset={imageUrls.responsive.tablet.replace('webp', 'avif')}
        type="image/avif"
      >
      <source 
        srcset={imageUrls.responsive.mobile.replace('webp', 'avif')}
        type="image/avif"
      >
      
      <!-- WebP format for good browser support -->
      <source 
        media="(min-width: 1200px)" 
        srcset={imageUrls.responsive.desktop}
        type="image/webp"
      >
      <source 
        media="(min-width: 768px)" 
        srcset={imageUrls.responsive.tablet}
        type="image/webp"
      >
      <source 
        srcset={imageUrls.responsive.mobile}
        type="image/webp"
      >
      
      <!-- Fallback JPEG -->
      <img
        src={imageUrls.optimized}
        alt={alt}
        width={width}
        height={height}
        sizes={sizes}
        loading={priority ? 'eager' : loading}
        decoding={priority ? 'sync' : 'async'}
        class={`product-image ${zoom ? 'zoom-image' : ''}`}
        style={`
          background-image: url('${finalBlurDataURL}');
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
        `}
        onload="this.style.backgroundImage='none'"
        onerror="this.style.backgroundImage='url(/images/placeholder.jpg)'"
      >
    </picture>
  ) : (
    <img
      src={imageUrls.optimized}
      alt={alt}
      width={width}
      height={height}
      loading={priority ? 'eager' : loading}
      decoding={priority ? 'sync' : 'async'}
      class={`product-image ${zoom ? 'zoom-image' : ''}`}
      style={`
        background-image: url('${finalBlurDataURL}');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
      `}
      onload="this.style.backgroundImage='none'"
      onerror="this.style.backgroundImage='url(/images/placeholder.jpg)'"
    >
  )}
  
  {zoom && (
    <div class="zoom-overlay">
      <button class="zoom-button" aria-label="Bild vergrößern">
        <i class="fas fa-search-plus"></i>
      </button>
    </div>
  )}
  
  {caption && (
    <figcaption class="product-image-caption">
      {caption}
    </figcaption>
  )}
</div>

<style>
  .product-image-container {
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    background-color: var(--boho-beige);
    transition: all 0.3s ease;
  }

  .product-image-container:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .product-image-picture {
    display: block;
    width: 100%;
    height: 100%;
  }

  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: all 0.3s ease;
    border-radius: 0.5rem;
  }

  .product-image-container:hover .product-image {
    transform: scale(1.05);
  }

  .zoom-enabled {
    cursor: zoom-in;
  }

  .zoom-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .product-image-container:hover .zoom-overlay {
    opacity: 1;
  }

  .zoom-button {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: var(--boho-dark);
  }

  .zoom-button:hover {
    background: var(--boho-pink);
    color: white;
    transform: scale(1.1);
  }

  .product-image-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    color: white;
    padding: 1rem;
    font-size: 0.875rem;
    text-align: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .product-image-container:hover .product-image-caption {
    opacity: 1;
  }

  .gallery-item {
    aspect-ratio: 1;
    cursor: pointer;
  }

  .gallery-item:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
  }

  /* Loading animation */
  .product-image-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    animation: shimmer 2s infinite;
    z-index: 1;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .product-image-container {
      border-radius: 0.375rem;
    }
    
    .zoom-button {
      width: 2.5rem;
      height: 2.5rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .product-image-container {
      border: 2px solid var(--boho-dark);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .product-image-container,
    .product-image,
    .zoom-overlay,
    .zoom-button {
      transition: none;
    }
    
    .product-image-container::before {
      animation: none;
    }
  }
</style>

<script>
  // Image lazy loading and optimization
  document.addEventListener('DOMContentLoaded', function() {
    // Intersection Observer for lazy loading
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute('data-src');
              observer.unobserve(img);
            }
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });

      // Observe all lazy images
      document.querySelectorAll('img[data-src]').forEach(img => {
        imageObserver.observe(img);
      });
    }

    // Zoom functionality
    document.querySelectorAll('.zoom-enabled').forEach(container => {
      const img = container.querySelector('.product-image') as HTMLImageElement;
      const zoomButton = container.querySelector('.zoom-button') as HTMLButtonElement;
      
      if (img && zoomButton) {
        zoomButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // Create zoom modal
          const modal = document.createElement('div');
          modal.className = 'zoom-modal';
          modal.innerHTML = `
            <div class="zoom-modal-content">
              <button class="zoom-close" aria-label="Schließen">
                <i class="fas fa-times"></i>
              </button>
              <img src="${img.src}" alt="${img.alt}" class="zoom-modal-image">
            </div>
          `;
          
          document.body.appendChild(modal);
          document.body.style.overflow = 'hidden';
          
          // Close modal
          const closeModal = () => {
            document.body.removeChild(modal);
            document.body.style.overflow = '';
          };
          
          modal.querySelector('.zoom-close')?.addEventListener('click', closeModal);
          modal.addEventListener('click', (e) => {
            if (e.target === modal) closeModal();
          });
          
          // Keyboard navigation
          const handleKeydown = (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
              closeModal();
              document.removeEventListener('keydown', handleKeydown);
            }
          };
          document.addEventListener('keydown', handleKeydown);
        });
      }
    });

    // Image error handling
    document.querySelectorAll('.product-image').forEach(img => {
      img.addEventListener('error', function(this: HTMLImageElement) {
        this.src = '/images/placeholder.jpg';
        this.alt = 'Bild nicht verfügbar';
      });
    });

    // Preload critical images
    const preloadCriticalImages = () => {
      const criticalImages = document.querySelectorAll('.product-image[data-priority="true"]');
      criticalImages.forEach(img => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.as = 'image';
        link.href = (img as HTMLImageElement).src;
        document.head.appendChild(link);
      });
    };

    preloadCriticalImages();
  });

  // Zoom modal styles
  const zoomModalStyles = `
    .zoom-modal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      animation: fadeIn 0.3s ease;
    }
    
    .zoom-modal-content {
      position: relative;
      max-width: 90vw;
      max-height: 90vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .zoom-modal-image {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: 0.5rem;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    }
    
    .zoom-close {
      position: absolute;
      top: -3rem;
      right: 0;
      background: rgba(255, 255, 255, 0.9);
      border: none;
      border-radius: 50%;
      width: 3rem;
      height: 3rem;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      color: var(--boho-dark);
      font-size: 1.25rem;
    }
    
    .zoom-close:hover {
      background: var(--boho-pink);
      color: white;
      transform: scale(1.1);
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    @media (max-width: 768px) {
      .zoom-modal-content {
        max-width: 95vw;
        max-height: 95vh;
      }
      
      .zoom-close {
        top: -2.5rem;
        width: 2.5rem;
        height: 2.5rem;
        font-size: 1rem;
      }
    }
  `;

  // Inject zoom modal styles
  if (!document.querySelector('#zoom-modal-styles')) {
    const style = document.createElement('style');
    style.id = 'zoom-modal-styles';
    style.textContent = zoomModalStyles;
    document.head.appendChild(style);
  }
</script>
