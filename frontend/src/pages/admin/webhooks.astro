---
import Layout from '../../layouts/Layout.astro';

// Mock webhook data
const webhookSubscriptions = [
  {
    id: 'wh_001',
    name: 'Order Processing',
    url: 'https://myapp.com/webhooks/orders',
    events: ['order.created', 'order.updated', 'order.shipped'],
    secret: 'whsec_1234567890abcdef',
    active: true,
    createdAt: '2024-01-15T10:00:00Z',
    lastTriggered: '2024-03-10T14:30:00Z',
    deliveryCount: 1247,
    successRate: 98.5,
  },
  {
    id: 'wh_002',
    name: 'Analytics Integration',
    url: 'https://analytics.example.com/webhook',
    events: ['payment.succeeded', 'order.delivered'],
    secret: 'whsec_abcdef1234567890',
    active: true,
    createdAt: '2024-02-01T09:00:00Z',
    lastTriggered: '2024-03-09T16:45:00Z',
    deliveryCount: 892,
    successRate: 99.2,
  },
  {
    id: 'wh_003',
    name: 'Inventory Management',
    url: 'https://inventory.example.com/webhook',
    events: ['product.stock_low', 'product.stock_out', 'inventory.alert'],
    secret: 'whsec_9876543210fedcba',
    active: false,
    createdAt: '2024-02-15T11:30:00Z',
    lastTriggered: '2024-02-28T10:15:00Z',
    deliveryCount: 156,
    successRate: 95.8,
  },
];

const recentDeliveries = [
  {
    id: 'del_001',
    subscriptionId: 'wh_001',
    eventType: 'order.created',
    status: 'delivered',
    attempts: 1,
    responseCode: 200,
    createdAt: '2024-03-10T14:30:00Z',
    deliveredAt: '2024-03-10T14:30:05Z',
  },
  {
    id: 'del_002',
    subscriptionId: 'wh_001',
    eventType: 'order.updated',
    status: 'failed',
    attempts: 3,
    responseCode: 500,
    createdAt: '2024-03-10T15:00:00Z',
  },
  {
    id: 'del_003',
    subscriptionId: 'wh_002',
    eventType: 'payment.succeeded',
    status: 'pending',
    attempts: 0,
    createdAt: '2024-03-10T15:30:00Z',
  },
];

const eventTypes = [
  { category: 'Orders', events: ['order.created', 'order.updated', 'order.shipped', 'order.delivered'] },
  { category: 'Payments', events: ['payment.created', 'payment.succeeded', 'payment.failed', 'payment.refunded'] },
  { category: 'Customers', events: ['customer.created', 'customer.updated', 'customer.deleted'] },
  { category: 'Products', events: ['product.created', 'product.updated', 'product.stock_low', 'product.stock_out'] },
  { category: 'Reviews', events: ['review.created', 'review.updated', 'review.deleted'] },
  { category: 'Newsletter', events: ['newsletter.subscribed', 'newsletter.unsubscribed'] },
];
---

<Layout 
  title="Webhook Management - Admin Dashboard"
  description="Verwalten Sie Webhook-Integrationen und Event-Trigger für die Casa Petrada Plattform."
>
  <!-- Webhook Management Header -->
  <section class="py-8 bg-boho-light">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-serif font-bold text-boho-dark">Webhook Management</h1>
          <p class="text-boho-dark/70 mt-2">Verwalten Sie Event-Trigger und externe Integrationen</p>
        </div>
        <button 
          class="px-6 py-3 bg-boho-pink text-white rounded-lg hover:bg-boho-brown transition-colors"
          onclick="openCreateWebhookModal()"
        >
          <i class="fas fa-plus mr-2"></i>
          Neuer Webhook
        </button>
      </div>
    </div>
  </section>

  <!-- Webhook Management Content -->
  <section class="py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Webhook Subscriptions -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-lg shadow-sm border border-boho-accent/20">
            <div class="px-6 py-4 border-b border-boho-accent/20">
              <h2 class="text-xl font-semibold text-boho-dark">Webhook Subscriptions</h2>
            </div>
            <div class="p-6">
              <div class="space-y-4">
                {webhookSubscriptions.map((webhook) => (
                  <div class="border border-boho-accent/20 rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div class="flex items-center justify-between mb-3">
                      <div class="flex items-center space-x-3">
                        <div class={`w-3 h-3 rounded-full ${webhook.active ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                        <h3 class="font-semibold text-boho-dark">{webhook.name}</h3>
                        <span class={`px-2 py-1 text-xs rounded ${
                          webhook.active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {webhook.active ? 'Aktiv' : 'Inaktiv'}
                        </span>
                      </div>
                      <div class="flex items-center space-x-2">
                        <button 
                          class="p-2 text-boho-pink hover:text-boho-brown transition-colors"
                          onclick={`testWebhook('${webhook.id}')`}
                          title="Testen"
                        >
                          <i class="fas fa-play"></i>
                        </button>
                        <button 
                          class="p-2 text-boho-pink hover:text-boho-brown transition-colors"
                          onclick={`editWebhook('${webhook.id}')`}
                          title="Bearbeiten"
                        >
                          <i class="fas fa-edit"></i>
                        </button>
                        <button 
                          class="p-2 text-red-500 hover:text-red-700 transition-colors"
                          onclick={`deleteWebhook('${webhook.id}')`}
                          title="Löschen"
                        >
                          <i class="fas fa-trash"></i>
                        </button>
                      </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                      <div>
                        <p class="text-sm text-boho-dark/70 mb-1">URL</p>
                        <p class="text-sm font-mono text-boho-dark break-all">{webhook.url}</p>
                      </div>
                      <div>
                        <p class="text-sm text-boho-dark/70 mb-1">Events</p>
                        <div class="flex flex-wrap gap-1">
                          {webhook.events.map((event) => (
                            <span class="px-2 py-1 text-xs bg-boho-beige text-boho-dark rounded">
                              {event}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    <div class="grid grid-cols-3 gap-4 text-sm">
                      <div>
                        <p class="text-boho-dark/70">Deliveries</p>
                        <p class="font-semibold text-boho-dark">{webhook.deliveryCount.toLocaleString()}</p>
                      </div>
                      <div>
                        <p class="text-boho-dark/70">Success Rate</p>
                        <p class="font-semibold text-boho-dark">{webhook.successRate}%</p>
                      </div>
                      <div>
                        <p class="text-boho-dark/70">Last Triggered</p>
                        <p class="font-semibold text-boho-dark">
                          {webhook.lastTriggered ? new Date(webhook.lastTriggered).toLocaleDateString('de-DE') : 'Nie'}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        <!-- Recent Deliveries -->
        <div>
          <div class="bg-white rounded-lg shadow-sm border border-boho-accent/20">
            <div class="px-6 py-4 border-b border-boho-accent/20">
              <h2 class="text-xl font-semibold text-boho-dark">Recent Deliveries</h2>
            </div>
            <div class="p-6">
              <div class="space-y-3">
                {recentDeliveries.map((delivery) => (
                  <div class="flex items-center justify-between p-3 bg-boho-beige rounded-lg">
                    <div class="flex items-center space-x-3">
                      <div class={`w-2 h-2 rounded-full ${
                        delivery.status === 'delivered' ? 'bg-green-500' :
                        delivery.status === 'failed' ? 'bg-red-500' :
                        'bg-yellow-500'
                      }`}></div>
                      <div>
                        <p class="text-sm font-medium text-boho-dark">{delivery.eventType}</p>
                        <p class="text-xs text-boho-dark/70">
                          {new Date(delivery.createdAt).toLocaleString('de-DE')}
                        </p>
                      </div>
                    </div>
                    <div class="text-right">
                      <p class="text-sm font-medium text-boho-dark">
                        {delivery.status === 'delivered' ? '✓' : 
                         delivery.status === 'failed' ? '✗' : '⏳'}
                      </p>
                      {delivery.responseCode && (
                        <p class="text-xs text-boho-dark/70">{delivery.responseCode}</p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
              
              <div class="mt-4 pt-4 border-t border-boho-accent/20">
                <a 
                  href="#" 
                  class="text-boho-pink hover:text-boho-brown transition-colors text-sm font-medium"
                >
                  Alle Deliveries anzeigen →
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Create Webhook Modal -->
  <div id="create-webhook-modal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="px-6 py-4 border-b border-boho-accent/20">
          <h3 class="text-xl font-semibold text-boho-dark">Neuen Webhook erstellen</h3>
        </div>
        <form id="create-webhook-form" class="p-6 space-y-4">
          <div>
            <label class="block text-sm font-medium text-boho-dark mb-2">Name</label>
            <input 
              type="text" 
              name="name" 
              class="w-full px-3 py-2 border border-boho-accent/30 rounded-lg focus:ring-2 focus:ring-boho-pink focus:border-boho-pink"
              placeholder="z.B. Order Processing"
              required
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-boho-dark mb-2">Webhook URL</label>
            <input 
              type="url" 
              name="url" 
              class="w-full px-3 py-2 border border-boho-accent/30 rounded-lg focus:ring-2 focus:ring-boho-pink focus:border-boho-pink"
              placeholder="https://your-app.com/webhook"
              required
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-boho-dark mb-2">Events</label>
            <div class="space-y-2 max-h-40 overflow-y-auto border border-boho-accent/30 rounded-lg p-3">
              {eventTypes.map((category) => (
                <div>
                  <h4 class="font-medium text-boho-dark text-sm mb-2">{category.category}</h4>
                  <div class="space-y-1 ml-4">
                    {category.events.map((event) => (
                      <label class="flex items-center space-x-2">
                        <input 
                          type="checkbox" 
                          name="events" 
                          value={event}
                          class="rounded border-boho-accent/30 text-boho-pink focus:ring-boho-pink"
                        />
                        <span class="text-sm text-boho-dark">{event}</span>
                      </label>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-boho-dark mb-2">Secret Key</label>
            <div class="flex space-x-2">
              <input 
                type="text" 
                name="secret" 
                class="flex-1 px-3 py-2 border border-boho-accent/30 rounded-lg focus:ring-2 focus:ring-boho-pink focus:border-boho-pink"
                placeholder="Webhook secret for signature verification"
                required
              />
              <button 
                type="button" 
                class="px-4 py-2 bg-boho-beige text-boho-dark rounded-lg hover:bg-boho-accent/20 transition-colors"
                onclick="generateSecret()"
              >
                <i class="fas fa-sync"></i>
              </button>
            </div>
          </div>
          
          <div class="flex items-center space-x-2">
            <input 
              type="checkbox" 
              name="active" 
              id="active"
              class="rounded border-boho-accent/30 text-boho-pink focus:ring-boho-pink"
              checked
            />
            <label for="active" class="text-sm text-boho-dark">Webhook aktivieren</label>
          </div>
          
          <div class="flex justify-end space-x-3 pt-4">
            <button 
              type="button" 
              class="px-4 py-2 border border-boho-accent text-boho-dark rounded-lg hover:bg-boho-beige transition-colors"
              onclick="closeCreateWebhookModal()"
            >
              Abbrechen
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 bg-boho-pink text-white rounded-lg hover:bg-boho-brown transition-colors"
            >
              Webhook erstellen
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Modal animations */
  .fixed {
    transition: opacity 0.3s ease-in-out;
  }
  
  .fixed.hidden {
    opacity: 0;
    pointer-events: none;
  }
  
  /* Custom scrollbar for event selection */
  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: #c4a484;
    border-radius: 3px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: #a68b5b;
  }
</style>

<script>
  // Webhook management functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Create webhook form submission
    document.getElementById('create-webhook-form')?.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const webhookData = {
        name: formData.get('name'),
        url: formData.get('url'),
        events: formData.getAll('events'),
        secret: formData.get('secret'),
        active: formData.get('active') === 'on'
      };
      
      console.log('Creating webhook:', webhookData);
      
      // In a real app, this would make an API call
      setTimeout(() => {
        showNotification('Webhook erfolgreich erstellt!', 'success');
        closeCreateWebhookModal();
        // Reload the page or update the UI
        location.reload();
      }, 1000);
    });
  });

  // Modal functions
  function openCreateWebhookModal() {
    const modal = document.getElementById('create-webhook-modal');
    if (modal) {
      modal.classList.remove('hidden');
    }
  }

  function closeCreateWebhookModal() {
    const modal = document.getElementById('create-webhook-modal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  // Webhook actions
  function testWebhook(webhookId) {
    console.log(`Testing webhook: ${webhookId}`);
    showNotification('Webhook-Test wird gesendet...', 'info');
    
    // In a real app, this would make an API call
    setTimeout(() => {
      showNotification('Test-Webhook erfolgreich gesendet!', 'success');
    }, 1000);
  }

  function editWebhook(webhookId) {
    console.log(`Editing webhook: ${webhookId}`);
    // In a real app, this would open an edit modal or redirect to edit page
    showNotification('Webhook-Bearbeitung wird geladen...', 'info');
  }

  function deleteWebhook(webhookId) {
    if (confirm('Möchten Sie diesen Webhook wirklich löschen?')) {
      console.log(`Deleting webhook: ${webhookId}`);
      showNotification('Webhook wird gelöscht...', 'info');
      
      // In a real app, this would make an API call
      setTimeout(() => {
        showNotification('Webhook erfolgreich gelöscht!', 'success');
        // Reload the page or update the UI
        location.reload();
      }, 1000);
    }
  }

  // Generate secret key
  function generateSecret() {
    const secretInput = document.querySelector('input[name="secret"]') as HTMLInputElement;
    if (secretInput) {
      const secret = 'whsec_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
      secretInput.value = secret;
    }
  }

  // Show notification
  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white ${
      type === 'success' ? 'bg-green-600' : 
      type === 'error' ? 'bg-red-600' : 
      'bg-boho-pink'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  // Close modal on outside click
  document.addEventListener('click', function(e) {
    const modal = document.getElementById('create-webhook-modal');
    if (e.target === modal) {
      closeCreateWebhookModal();
    }
  });

  // Close modal on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeCreateWebhookModal();
    }
  });
</script>
