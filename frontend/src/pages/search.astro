---
import Layout from '../layouts/Layout.astro';

// Mock search results - in real app this would come from API
const searchResults = [
  {
    id: 1,
    name: "Tibet Armband",
    slug: "tibet-armband",
    price: 24.90,
    originalPrice: 29.90,
    discount: 17,
    image: "/images/products/tibet-armband.jpg",
    category: "Armbänder",
    subcategory: "Einfacharmbänder",
    rating: 4.8,
    reviewCount: 127,
    inStock: true,
    stock: 15,
    tags: ["Tibet", "Handgefertigt", "Naturstein", "Spirituell"],
    description: "Handgefertigtes Tibet Armband aus natürlichen Materialien."
  },
  {
    id: 2,
    name: "Boho Kette mit Anhänger",
    slug: "boho-kette-anhaenger",
    price: 39.90,
    image: "/images/products/product_1.jpg",
    category: "Ketten",
    subcategory: "Kurze Ketten",
    rating: 4.6,
    reviewCount: 89,
    inStock: true,
    stock: 8,
    tags: ["Boho", "Anhänger", "Handgefertigt"],
    description: "Elegante Boho Kette mit handgefertigtem Anhänger."
  },
  {
    id: 3,
    name: "Mondstein Ohrringe",
    slug: "mondstein-ohrringe",
    price: 49.90,
    image: "/images/products/product_3.jpg",
    category: "Ohrringe",
    subcategory: "Stein-Ohrringe",
    rating: 4.4,
    reviewCount: 56,
    inStock: true,
    stock: 12,
    tags: ["Mondstein", "Silber", "Handgefertigt"],
    description: "Zarte Mondstein Ohrringe in Silber gefasst."
  },
  {
    id: 4,
    name: "Feder Fußkettchen",
    slug: "feder-fusskettchen",
    price: 19.90,
    image: "/images/products/product_4.jpg",
    category: "Fußkettchen",
    subcategory: "Feder-Fußkettchen",
    rating: 4.2,
    reviewCount: 34,
    inStock: true,
    stock: 20,
    tags: ["Feder", "Zart", "Sommerlich"],
    description: "Zartes Fußkettchen mit Federanhänger."
  },
  {
    id: 5,
    name: "Leder Wickelarmband",
    slug: "leder-wickelarmband",
    price: 34.90,
    image: "/images/products/product_5.jpg",
    category: "Armbänder",
    subcategory: "Wickelarmbänder",
    rating: 4.7,
    reviewCount: 78,
    inStock: false,
    stock: 0,
    tags: ["Leder", "Wickelarmband", "Robust"],
    description: "Robustes Wickelarmband aus echtem Leder."
  },
  {
    id: 6,
    name: "Muschel Kette",
    slug: "muschel-kette",
    price: 32.50,
    image: "/images/products/product_6.jpg",
    category: "Ketten",
    subcategory: "Sommer-Ketten",
    rating: 4.1,
    reviewCount: 45,
    inStock: true,
    stock: 6,
    tags: ["Muschel", "Sommer", "Strand"],
    description: "Sommerliche Kette mit echten Muscheln."
  }
];

const categories = [
  { name: "Alle Kategorien", value: "all", count: 156 },
  { name: "Armbänder", value: "armbaender", count: 45 },
  { name: "Ketten", value: "ketten", count: 38 },
  { name: "Ohrringe", value: "ohrringe", count: 28 },
  { name: "Fußkettchen", value: "fusskettchen", count: 15 },
  { name: "Ringe", value: "ringe", count: 12 },
  { name: "Fashion", value: "fashion", count: 18 }
];

const materials = [
  { name: "Alle Materialien", value: "all" },
  { name: "Silber", value: "silber" },
  { name: "Gold", value: "gold" },
  { name: "Leder", value: "leder" },
  { name: "Perlen", value: "perlen" },
  { name: "Stein", value: "stein" },
  { name: "Metall", value: "metall" }
];

const colors = [
  { name: "Alle Farben", value: "all" },
  { name: "Silber", value: "silber" },
  { name: "Gold", value: "gold" },
  { name: "Braun", value: "braun" },
  { name: "Schwarz", value: "schwarz" },
  { name: "Weiß", value: "weiss" },
  { name: "Bunt", value: "bunt" }
];

const priceRanges = [
  { name: "Alle Preise", value: "all" },
  { name: "Unter 20 €", value: "0-20" },
  { name: "20 - 40 €", value: "20-40" },
  { name: "40 - 60 €", value: "40-60" },
  { name: "Über 60 €", value: "60+" }
];

const sortOptions = [
  { name: "Relevanz", value: "relevance" },
  { name: "Preis: Niedrig zu Hoch", value: "price-asc" },
  { name: "Preis: Hoch zu Niedrig", value: "price-desc" },
  { name: "Neueste zuerst", value: "newest" },
  { name: "Beliebtheit", value: "popularity" },
  { name: "Bewertung", value: "rating" }
];

// Get search query from URL
const url = new URL(Astro.request.url);
const query = url.searchParams.get('q') || '';
const category = url.searchParams.get('category') || 'all';
const material = url.searchParams.get('material') || 'all';
const color = url.searchParams.get('color') || 'all';
const priceRange = url.searchParams.get('price') || 'all';
const sortBy = url.searchParams.get('sort') || 'relevance';
const inStock = url.searchParams.get('stock') === 'true';
---

<Layout 
  title={`Suchergebnisse${query ? ` für "${query}"` : ''} - Casa Petrada`}
  description="Finde deine perfekten handgefertigten Boho Schmuckstücke bei Casa Petrada."
>
  <!-- Search Header -->
  <section class="py-8 bg-boho-light border-b border-boho-accent">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-3xl font-serif font-bold text-boho-dark mb-4">
          {query ? `Suchergebnisse für "${query}"` : 'Alle Produkte'}
        </h1>
        <p class="text-boho-dark/70">
          {searchResults.length} Produkte gefunden
        </p>
      </div>
    </div>
  </section>

  <!-- Search Content -->
  <section class="py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- Filters Sidebar -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow-sm border border-boho-accent/20 p-6 sticky top-4">
            <h2 class="text-lg font-semibold text-boho-dark mb-6">Filter</h2>
            
            <!-- Search Form -->
            <form id="search-form" class="mb-6">
              <div class="relative">
                <input 
                  type="text" 
                  name="q" 
                  value={query}
                  placeholder="Produkte suchen..."
                  class="w-full px-3 py-2 border border-boho-accent rounded-lg focus:ring-2 focus:ring-boho-pink focus:border-boho-pink pr-10"
                />
                <button 
                  type="submit" 
                  class="absolute inset-y-0 right-0 pr-3 flex items-center text-boho-dark/60 hover:text-boho-pink transition-colors"
                >
                  <i class="fas fa-search"></i>
                </button>
              </div>
            </form>

            <!-- Category Filter -->
            <div class="mb-6">
              <h3 class="font-medium text-boho-dark mb-3">Kategorie</h3>
              <div class="space-y-2">
                {categories.map((cat) => (
                  <label class="flex items-center justify-between cursor-pointer">
                    <div class="flex items-center">
                      <input 
                        type="radio" 
                        name="category" 
                        value={cat.value}
                        checked={category === cat.value}
                        class="mr-2"
                      />
                      <span class="text-sm text-boho-dark">{cat.name}</span>
                    </div>
                    <span class="text-xs text-boho-dark/60">({cat.count})</span>
                  </label>
                ))}
              </div>
            </div>

            <!-- Material Filter -->
            <div class="mb-6">
              <h3 class="font-medium text-boho-dark mb-3">Material</h3>
              <div class="space-y-2">
                {materials.map((mat) => (
                  <label class="flex items-center cursor-pointer">
                    <input 
                      type="radio" 
                      name="material" 
                      value={mat.value}
                      checked={material === mat.value}
                      class="mr-2"
                    />
                    <span class="text-sm text-boho-dark">{mat.name}</span>
                  </label>
                ))}
              </div>
            </div>

            <!-- Color Filter -->
            <div class="mb-6">
              <h3 class="font-medium text-boho-dark mb-3">Farbe</h3>
              <div class="space-y-2">
                {colors.map((col) => (
                  <label class="flex items-center cursor-pointer">
                    <input 
                      type="radio" 
                      name="color" 
                      value={col.value}
                      checked={color === col.value}
                      class="mr-2"
                    />
                    <span class="text-sm text-boho-dark">{col.name}</span>
                  </label>
                ))}
              </div>
            </div>

            <!-- Price Range Filter -->
            <div class="mb-6">
              <h3 class="font-medium text-boho-dark mb-3">Preis</h3>
              <div class="space-y-2">
                {priceRanges.map((range) => (
                  <label class="flex items-center cursor-pointer">
                    <input 
                      type="radio" 
                      name="price" 
                      value={range.value}
                      checked={priceRange === range.value}
                      class="mr-2"
                    />
                    <span class="text-sm text-boho-dark">{range.name}</span>
                  </label>
                ))}
              </div>
            </div>

            <!-- Stock Filter -->
            <div class="mb-6">
              <h3 class="font-medium text-boho-dark mb-3">Verfügbarkeit</h3>
              <label class="flex items-center cursor-pointer">
                <input 
                  type="checkbox" 
                  name="stock" 
                  checked={inStock}
                  class="mr-2"
                />
                <span class="text-sm text-boho-dark">Nur auf Lager</span>
              </label>
            </div>

            <!-- Clear Filters -->
            <button 
              type="button" 
              id="clear-filters"
              class="w-full text-sm text-boho-pink hover:text-boho-brown transition-colors"
            >
              Alle Filter zurücksetzen
            </button>
          </div>
        </div>

        <!-- Search Results -->
        <div class="lg:col-span-3">
          <!-- Sort and View Options -->
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-4">
              <span class="text-sm text-boho-dark/70">
                {searchResults.length} Produkte
              </span>
              <select 
                id="sort-select"
                class="px-3 py-2 border border-boho-accent rounded-lg focus:ring-2 focus:ring-boho-pink focus:border-boho-pink"
              >
                {sortOptions.map((option) => (
                  <option value={option.value} selected={sortBy === option.value}>
                    {option.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div class="flex items-center space-x-2">
              <button class="view-btn active" data-view="grid" title="Rasteransicht">
                <i class="fas fa-th"></i>
              </button>
              <button class="view-btn" data-view="list" title="Listenansicht">
                <i class="fas fa-list"></i>
              </button>
            </div>
          </div>

          <!-- Results Grid -->
          <div id="results-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {searchResults.map((product) => (
              <div class="product-card bg-white rounded-lg shadow-sm border border-boho-accent/20 overflow-hidden hover:shadow-md transition-shadow">
                <a href={`/products/${product.slug}`} class="block">
                  <div class="relative">
                    <img 
                      src={product.image} 
                      alt={product.name}
                      class="w-full h-48 object-cover"
                    />
                    
                    <!-- Stock Status -->
                    {!product.inStock && (
                      <div class="absolute top-2 left-2 bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded">
                        Ausverkauft
                      </div>
                    )}
                    
                    {product.discount && (
                      <div class="absolute top-2 right-2 bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded">
                        -{product.discount}%
                      </div>
                    )}
                    
                    <!-- Quick Actions -->
                    <div class="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center opacity-0 hover:opacity-100">
                      <div class="flex space-x-2">
                        <button class="quick-action-btn" title="Zur Wunschliste hinzufügen">
                          <i class="fas fa-heart"></i>
                        </button>
                        <button class="quick-action-btn" title="Schnellansicht">
                          <i class="fas fa-eye"></i>
                        </button>
                        <button class="quick-action-btn" title="Vergleichen">
                          <i class="fas fa-balance-scale"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                </a>
                
                <div class="p-4">
                  <div class="mb-2">
                    <span class="text-xs text-boho-dark/60">{product.category}</span>
                  </div>
                  
                  <h3 class="font-semibold text-boho-dark mb-2">
                    <a href={`/products/${product.slug}`} class="hover:text-boho-pink transition-colors">
                      {product.name}
                    </a>
                  </h3>
                  
                  <p class="text-sm text-boho-dark/70 mb-3 line-clamp-2">
                    {product.description}
                  </p>
                  
                  <div class="flex items-center justify-between mb-3">
                    <div class="flex items-center space-x-1">
                      <div class="flex items-center">
                        {Array.from({ length: 5 }, (_, i) => (
                          <i class={`fas fa-star text-xs ${i < Math.floor(product.rating) ? 'text-yellow-400' : 'text-gray-300'}`}></i>
                        ))}
                      </div>
                      <span class="text-xs text-boho-dark/60">({product.reviewCount})</span>
                    </div>
                  </div>
                  
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-2">
                      <span class="text-lg font-bold text-boho-dark">
                        {product.price.toFixed(2)} €
                      </span>
                      {product.originalPrice && (
                        <span class="text-sm text-boho-dark/60 line-through">
                          {product.originalPrice.toFixed(2)} €
                        </span>
                      )}
                    </div>
                    
                    <button 
                      class={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        product.inStock 
                          ? 'bg-boho-pink text-white hover:bg-boho-brown' 
                          : 'bg-gray-300 text-gray-600 cursor-not-allowed'
                      }`}
                      disabled={!product.inStock}
                    >
                      {product.inStock ? 'In den Warenkorb' : 'Nicht verfügbar'}
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <!-- No Results -->
          {searchResults.length === 0 && (
            <div class="text-center py-12">
              <div class="mx-auto w-24 h-24 bg-boho-beige rounded-full flex items-center justify-center mb-4">
                <i class="fas fa-search text-3xl text-boho-pink"></i>
              </div>
              <h3 class="text-xl font-semibold text-boho-dark mb-2">Keine Produkte gefunden</h3>
              <p class="text-boho-dark/70 mb-6">
                Versuche es mit anderen Suchbegriffen oder filtern.
              </p>
              <button 
                id="clear-all-filters"
                class="px-6 py-3 bg-boho-pink text-white rounded-lg hover:bg-boho-brown transition-colors"
              >
                Alle Filter zurücksetzen
              </button>
            </div>
          )}

          <!-- Load More -->
          {searchResults.length > 0 && (
            <div class="text-center mt-8">
              <button 
                id="load-more"
                class="px-6 py-3 border border-boho-accent text-boho-dark rounded-lg hover:bg-boho-beige transition-colors"
              >
                Mehr Produkte laden
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  .product-card {
    transition: all 0.3s ease;
  }

  .product-card:hover {
    transform: translateY(-2px);
  }

  .quick-action-btn {
    width: 2.5rem;
    height: 2.5rem;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: var(--boho-dark);
  }

  .quick-action-btn:hover {
    background: var(--boho-pink);
    color: white;
    transform: scale(1.1);
  }

  .view-btn {
    width: 2.5rem;
    height: 2.5rem;
    border: 1px solid var(--boho-accent);
    background: white;
    border-radius: 0.375rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: var(--boho-dark);
  }

  .view-btn.active,
  .view-btn:hover {
    background: var(--boho-pink);
    color: white;
    border-color: var(--boho-pink);
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* List view styles */
  .list-view .product-card {
    display: flex;
    flex-direction: row;
  }

  .list-view .product-card img {
    width: 200px;
    height: 150px;
    flex-shrink: 0;
  }

  .list-view .product-card > div:last-child {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  /* Loading states */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid var(--boho-pink);
    border-top: 2px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .lg\\:col-span-1 {
      order: 2;
    }
    
    .lg\\:col-span-3 {
      order: 1;
    }
    
    .list-view .product-card {
      flex-direction: column;
    }
    
    .list-view .product-card img {
      width: 100%;
      height: 200px;
    }
  }
</style>

<script>
  // Search functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchForm = document.getElementById('search-form');
    const sortSelect = document.getElementById('sort-select');
    const viewBtns = document.querySelectorAll('.view-btn');
    const resultsContainer = document.getElementById('results-container');
    const clearFiltersBtn = document.getElementById('clear-filters');
    const clearAllFiltersBtn = document.getElementById('clear-all-filters');
    const loadMoreBtn = document.getElementById('load-more');

    // View toggle
    viewBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const view = this.getAttribute('data-view');
        
        // Update active button
        viewBtns.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        
        // Update container class
        resultsContainer.className = resultsContainer.className.replace(/grid-cols-\d+/, '');
        if (view === 'list') {
          resultsContainer.classList.add('list-view');
        } else {
          resultsContainer.classList.remove('list-view');
          resultsContainer.classList.add('grid', 'grid-cols-1', 'sm:grid-cols-2', 'lg:grid-cols-3', 'gap-6');
        }
      });
    });

    // Sort functionality
    if (sortSelect) {
      sortSelect.addEventListener('change', function() {
        const sortBy = this.value;
        updateURL({ sort: sortBy });
        // In a real app, this would trigger a new search
        console.log('Sorting by:', sortBy);
      });
    }

    // Filter functionality
    const filterInputs = document.querySelectorAll('input[name="category"], input[name="material"], input[name="color"], input[name="price"], input[name="stock"]');
    filterInputs.forEach(input => {
      input.addEventListener('change', function() {
        applyFilters();
      });
    });

    // Search form
    if (searchForm) {
      searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        const query = formData.get('q');
        updateURL({ q: query });
        // In a real app, this would trigger a new search
        console.log('Searching for:', query);
      });
    }

    // Clear filters
    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', function() {
        clearAllFilters();
      });
    }

    if (clearAllFiltersBtn) {
      clearAllFiltersBtn.addEventListener('click', function() {
        clearAllFilters();
      });
    }

    // Load more
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', function() {
        // In a real app, this would load more results
        console.log('Loading more results...');
        this.classList.add('loading');
        
        setTimeout(() => {
          this.classList.remove('loading');
          // Simulate loading more results
          showNotification('Mehr Produkte geladen!', 'success');
        }, 1000);
      });
    }

    // Quick actions
    document.querySelectorAll('.quick-action-btn').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const action = this.querySelector('i').classList.contains('fa-heart') ? 'wishlist' :
                      this.querySelector('i').classList.contains('fa-eye') ? 'quickview' :
                      'compare';
        
        console.log(`${action} action triggered`);
        
        switch (action) {
          case 'wishlist':
            showNotification('Produkt zur Wunschliste hinzugefügt!', 'success');
            break;
          case 'quickview':
            showNotification('Schnellansicht wird geöffnet...', 'info');
            break;
          case 'compare':
            showNotification('Produkt zum Vergleich hinzugefügt!', 'success');
            break;
        }
      });
    });

    // Add to cart
    document.querySelectorAll('button[class*="bg-boho-pink"]').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        if (!this.disabled) {
          showNotification('Produkt zum Warenkorb hinzugefügt!', 'success');
        }
      });
    });

    function applyFilters() {
      const formData = new FormData();
      const category = document.querySelector('input[name="category"]:checked')?.value || 'all';
      const material = document.querySelector('input[name="material"]:checked')?.value || 'all';
      const color = document.querySelector('input[name="color"]:checked')?.value || 'all';
      const price = document.querySelector('input[name="price"]:checked')?.value || 'all';
      const stock = document.querySelector('input[name="stock"]')?.checked || false;
      
      updateURL({ category, material, color, price, stock: stock.toString() });
      
      // In a real app, this would trigger a new search
      console.log('Applying filters:', { category, material, color, price, stock });
    }

    function clearAllFilters() {
      // Reset all form inputs
      document.querySelectorAll('input[type="radio"]').forEach(input => {
        if (input.value === 'all') {
          input.checked = true;
        } else {
          input.checked = false;
        }
      });
      
      document.querySelectorAll('input[type="checkbox"]').forEach(input => {
        input.checked = false;
      });
      
      document.querySelector('input[name="q"]').value = '';
      
      // Update URL
      updateURL({ q: '', category: 'all', material: 'all', color: 'all', price: 'all', stock: 'false' });
      
      // In a real app, this would trigger a new search
      console.log('All filters cleared');
    }

    function updateURL(params) {
      const url = new URL(window.location);
      Object.entries(params).forEach(([key, value]) => {
        if (value && value !== 'all' && value !== 'false') {
          url.searchParams.set(key, value);
        } else {
          url.searchParams.delete(key);
        }
      });
      window.history.pushState({}, '', url);
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white ${
        type === 'success' ? 'bg-green-600' : 
        type === 'error' ? 'bg-red-600' : 
        'bg-boho-pink'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  });
</script>